{"version":3,"sources":["components/Nombre.js","components/Chat.js","components/Rutas.js","App.js","serviceWorker.js","index.js"],"names":["Nombre","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","nombre","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","value","react_default","a","createElement","react_router","to","props","socket","emit","preventDefault","className","onSubmit","type","onChange","style","width","placeholder","Component","Chat","mensajes","mensaje","_this2","on","data","concat","toConsumableArray","map","element","i","key","Header","react_router_dom","Rutas","response","endpoint","socketIOClient","components_Nombre","console","log","exact","path","component","src_components_Chat","App","components_Rutas","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6435145a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Redirect } from 'react-router-dom'\r\nclass Nombre extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n        nombre:\"\"\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    \r\n  }\r\n  handleChange(event) {\r\n    \r\n    this.setState({nombre: event.target.value});\r\n    \r\n    return <Redirect to='/' />\r\n  }\r\n  handleSubmit(event) {\r\n    this.props.socket.emit('nuevo_usuario',this.state.nombre);\r\n    event.preventDefault();\r\n  }\r\n  \r\n  render() {\r\n    \r\n    return (\r\n        <div >\r\n            <div className=\"container\">                \r\n                \r\n                <form  className=\"form-inline\" onSubmit={this.handleSubmit}>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-sm-10\">\r\n                            <input type=\"text\" value={this.state.nombre} onChange={this.handleChange} className=\"form-control\" style={{width:\"100%\"}}   placeholder=\"Ingrese su Nombre\"/>\r\n                        </div>\r\n                        <div className=\"form-group col-sm-2\">\r\n                            <button type=\"submit\" className=\"btn btn-primary\">Guardar</button>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    \r\n                </form>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default Nombre;","import React, { Component } from \"react\";\r\nimport './Chat.css';\r\nclass Chat extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        mensajes:[],\r\n        mensaje:\"\"\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  componentDidMount() {\r\n   \r\n    if(this.props.socket){\r\n        this.props.socket.on(\"mensaje\", data => {\r\n            this.setState({mensajes:[data,...this.state.mensajes] });\r\n            \r\n        });\r\n    }\r\n  }\r\n  handleChange(event) {\r\n    this.setState({mensaje: event.target.value});\r\n  }\r\n  handleSubmit(event) {\r\n    this.props.socket.emit('mensaje',{mensaje:this.state.mensaje});\r\n    event.preventDefault();\r\n  }\r\n  \r\n  render() {\r\n    var mensajes=this.state.mensajes.map((element,i)=>{\r\n        return(\r\n            <div key={i}>\r\n                <div>{element.nombre}: </div>\r\n                <div>{element.mensaje}</div>\r\n            </div>\r\n            \r\n        )\r\n    })\r\n    return (\r\n        <div >\r\n            <div className=\"container\">                \r\n                <div className=\"card\">\r\n                <div className=\"chat\" >{mensajes}</div>\r\n                    \r\n                </div>\r\n                <form  className=\"form-inline\" onSubmit={this.handleSubmit}>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-sm-10\">\r\n                            <input type=\"text\" value={this.state.mensaje} onChange={this.handleChange} className=\"form-control\" style={{width:\"100%\"}}   placeholder=\"Ingrese su mensaje\"/>\r\n                        </div>\r\n                        <div className=\"form-group col-sm-2\">\r\n                            <button type=\"submit\" className=\"btn btn-primary\">Enviar mensaje</button>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    \r\n                </form>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default Chat;","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport Nombre from './Nombre';\r\nimport Chat from './Chat';\r\nclass Rutas extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        mensajes:[],\r\n        socket:null,\r\n        mensaje:\"\",\r\n        response: false,\r\n        endpoint: \"http://127.0.0.1:4000\"\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    const { endpoint } = this.state;\r\n    const socket=socketIOClient(endpoint);\r\n    this.setState({socket:socket });\r\n  }\r\n  \r\n  \r\n  render() {\r\n    var chat=()=>{return(<Chat socket={this.state.socket}></Chat>)};\r\n    var nombre=()=>{return (<Nombre socket={this.state.socket}></Nombre>)}\r\n    console.log(nombre);\r\n    \r\n    return (\r\n        <div >\r\n            <Router>\r\n                <div>\r\n                    <Header />\r\n\r\n                    <Route exact path=\"/\" component={nombre} />\r\n                    <Route path=\"/chat\" component={chat} />\r\n                </div>\r\n            </Router>\r\n            \r\n        </div>\r\n    );\r\n  }\r\n   \r\n};\r\n\r\n  function Header() {\r\n    return (\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\">Nombre</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/chat\">Chat</Link>\r\n        </li>\r\n      </ul>\r\n    );\r\n  }\r\nexport default Rutas;","import React from 'react';\r\nimport './App.css';\r\nimport Rutas from './components/Rutas';\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Rutas></Rutas>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}